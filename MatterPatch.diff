diff --git a/examples/bridge-app/esp32/main/DeviceCallbacks.cpp b/examples/bridge-app/esp32/main/DeviceCallbacks.cpp
index b7e5a2bff..003c40f55 100644
--- a/examples/bridge-app/esp32/main/DeviceCallbacks.cpp
+++ b/examples/bridge-app/esp32/main/DeviceCallbacks.cpp
@@ -27,6 +27,8 @@
 
 #include "DeviceCallbacks.h"
 
+#include "esp_log.h"
+
 static const char * TAG = "bridge-devicecallbacks";
 
 using namespace ::chip;
diff --git a/examples/platform/esp32/common/CommonDeviceCallbacks.cpp b/examples/platform/esp32/common/CommonDeviceCallbacks.cpp
index 929fc2605..f8af5b578 100644
--- a/examples/platform/esp32/common/CommonDeviceCallbacks.cpp
+++ b/examples/platform/esp32/common/CommonDeviceCallbacks.cpp
@@ -27,6 +27,12 @@
 #endif // CONFIG_BT_NIMBLE_ENABLED
 #endif // CONFIG_BT_ENABLED
 
+#define min
+#define max
+#include "host/ble_hs.h"
+#undef min
+#undef max
+
 #include "esp_err.h"
 #include "esp_heap_caps.h"
 #include "esp_log.h"
diff --git a/src/platform/ESP32/ConnectivityManagerImpl_WiFi.cpp b/src/platform/ESP32/ConnectivityManagerImpl_WiFi.cpp
index 2eb2e1b3a..45bc20166 100644
--- a/src/platform/ESP32/ConnectivityManagerImpl_WiFi.cpp
+++ b/src/platform/ESP32/ConnectivityManagerImpl_WiFi.cpp
@@ -39,6 +39,8 @@
 #include <lwip/nd6.h>
 #include <lwip/netif.h>
 
+#include "esp_log.h"
+
 #if CHIP_DEVICE_CONFIG_ENABLE_WIFI
 
 using namespace ::chip;
diff --git a/src/platform/ESP32/PlatformManagerImpl.cpp b/src/platform/ESP32/PlatformManagerImpl.cpp
index 074750654..4caecc6df 100644
--- a/src/platform/ESP32/PlatformManagerImpl.cpp
+++ b/src/platform/ESP32/PlatformManagerImpl.cpp
@@ -70,19 +70,20 @@ CHIP_ERROR PlatformManagerImpl::_InitChipStack(void)
     // Make sure the LwIP core lock has been initialized
     ReturnErrorOnFailure(Internal::InitLwIPCoreLock());
 
-    err = esp_netif_init();
-    if (err != ESP_OK)
-    {
-        goto exit;
-    }
+    if (0) { //! 0 for LOOKin Firmware
+        err = esp_netif_init();
+        if (err != ESP_OK)
+        {
+            goto exit;
+        }
 
-    // Arrange for the ESP event loop to deliver events into the CHIP Device layer.
-    err = esp_event_loop_create_default();
-    if (err != ESP_OK)
-    {
-        goto exit;
+        // Arrange for the ESP event loop to deliver events into the CHIP Device layer.
+        err = esp_event_loop_create_default();
+        if (err != ESP_OK)
+        {
+            goto exit;
+        }
     }
-
 #if CHIP_DEVICE_CONFIG_ENABLE_WIFI
     {
         wifi_init_config_t cfg;
