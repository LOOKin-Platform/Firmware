#include "Unity.h"

#include <string>
#include <vector>
#include "Converter.h"
#include "IRLib.h"

using namespace std;

extern "C" 
{
	TEST_CASE("Repeat1", "IRLib")
	{
		vector<int32_t> Input = vector<int32_t>({9024, -4512, 564, -1692, 564, -1692, 564, -1692, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -1692, 564, -1692, 564, -1692, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -1692, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -1692, 564, -564, 564, -1692, 564, -1692, 564, -1692, 564, -1692, 564, -1692, 564, -1692, 564, -25000, 9024, -4512, 564, -1692, 564, -1692, 564, -1692, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -1692, 564, -1692, 564, -1692, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -1692, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -564, 564, -1692, 564, -564, 564, -1692, 564, -1692, 564, -1692, 564, -1692, 564, -1692, 564, -1692, 564, -45000});

		IRLib Signal(Input);
				
    	TEST_ASSERT_EQUAL(01, Signal.Protocol);
    	TEST_ASSERT_EQUAL(0xDB2408D7, Signal.Uint32Data);
    	TEST_ASSERT_EQUAL(0, Signal.MiscData);
    	TEST_ASSERT_EQUAL(false, Signal.IsRepeated);
    	TEST_ASSERT_EQUAL(0, Signal.RepeatCount);
    	TEST_ASSERT_EQUAL(0, Signal.RepeatPause);
	}
	
	TEST_CASE("Repeat2", "IRLib")
	{
		vector<int32_t> Input = vector<int32_t>({3459,-1702,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-1297,432,-73277,3459,-1702,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-1297,432,-73277,3459,-1702,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-1297,432,-73277,3459,-1702,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-432,432,-432,432,-1297,432,-1297,432,-1297,432,-1297,432,-1297,432,-432,432,-1297,432,-45000});

		IRLib Signal(Input);
				
    	TEST_ASSERT_EQUAL(01, Signal.Protocol);
    	TEST_ASSERT_EQUAL(0xDB2408D7, Signal.Uint32Data);
    	TEST_ASSERT_EQUAL(0, Signal.MiscData);
    	TEST_ASSERT_EQUAL(false, Signal.IsRepeated);
    	TEST_ASSERT_EQUAL(0, Signal.RepeatCount);
    	TEST_ASSERT_EQUAL(0, Signal.RepeatPause);
	}
	
	
	bool RepeatTest2 = TestSignal({});
	ESP_LOGE("RepeatTest2 (repeat)", "%s", RepeatTest2 ? "passed" : "not passed");

	bool RepeatTest3 = TestSignal({8630, -4220, 610, -1520, 610, -460, 610, -1530, 610, -460, 610, -460, 580, -1550, 610, -460, 590, -1550, 610, -460, 610, -1530, 590, -480, 610, -1520, 610, -1530, 610, -460, 610, -1530, 610, -460, 610, -460, 610, -460, 610, -1530, 590, -480, 590, -490, 580, -490, 610, -1530, 610, -1530, 610, -1530, 610, -1530, 610, -460, 610, -1530, 610, -1520, 610, -1530, 580, -490, 610, -460, 610, -25000, 8630, -4220, 610, -1520, 610, -460, 610, -1530, 610, -460, 610, -460, 580, -1550, 610, -460, 590, -1550, 610, -460, 610, -1530, 590, -480, 610, -1520, 610, -1530, 610, -460, 610, -1530, 610, -460, 610, -460, 610, -460, 610, -1530, 590, -480, 590, -490, 580, -490, 610, -1530, 610, -1530, 610, -1530, 610, -1530, 610, -460, 610, -1530, 610, -1520, 610, -1530, 580, -490, 610, -460, 610, -45000});
	ESP_LOGE("RepeatTest3 (repeat)", "%s", RepeatTest3 ? "passed" : "not passed");



		IRLib Signal(IRVector);

    	TEST_ASSERT_EQUAL(20, Signal.Protocol);
    	TEST_ASSERT_EQUAL(0xDB2408D7, Signal.Uint32Data);
    	TEST_ASSERT_EQUAL(0x02E5, Signal.MiscData);
	}
}